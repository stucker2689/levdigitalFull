//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class RepliconTimeEntriesResponse {

	public class TimeAllocations {
		public Activity activity {get;set;} 
		public Activity billingRate {get;set;} 
		public String breakType {get;set;} 
		public String comments {get;set;} 
		public String correlatedTimeOffUri {get;set;} 
		public String correlatedTimePunchUri {get;set;} 
		public List<CustomFieldValues> customFieldValues {get;set;} 
		public EndDate dateValue {get;set;} 
		public Duration duration {get;set;} 
		public Project project {get;set;} 
		public Task task {get;set;} 
		public Activity timeOffType {get;set;} 
		public String uri {get;set;} 
		public Owner user {get;set;} 

		public TimeAllocations(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'activity') {
							activity = new Activity(parser);
						} else if (text == 'billingRate') {
							billingRate = new Activity(parser);
						} else if (text == 'breakType') {
							breakType = parser.getText();
						} else if (text == 'comments') {
							comments = parser.getText();
						} else if (text == 'correlatedTimeOffUri') {
							correlatedTimeOffUri = parser.getText();
						} else if (text == 'correlatedTimePunchUri') {
							correlatedTimePunchUri = parser.getText();
						} else if (text == 'customFieldValues') {
							customFieldValues = arrayOfCustomFieldValues(parser);
						} else if (text == 'date') {
							dateValue = new EndDate(parser);
						} else if (text == 'duration') {
							duration = new Duration(parser);
						} else if (text == 'project') {
							project = new Project(parser);
						} else if (text == 'task') {
							task = new Task(parser);
						} else if (text == 'timeOffType') {
							timeOffType = new Activity(parser);
						} else if (text == 'uri') {
							uri = parser.getText();
						} else if (text == 'user') {
							user = new Owner(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'TimeAllocations consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Owner {
		public String displayText {get;set;} 
		public String loginName {get;set;} 
		public String slug {get;set;} 
		public String uri {get;set;} 

		public Owner(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'displayText') {
							displayText = parser.getText();
						} else if (text == 'loginName') {
							loginName = parser.getText();
						} else if (text == 'slug') {
							slug = parser.getText();
						} else if (text == 'uri') {
							uri = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Owner consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Task {
		public String displayText {get;set;} 
		public String uri {get;set;} 

		public Task(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'displayText') {
							displayText = parser.getText();
						} else if (text == 'uri') {
							uri = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Task consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<d> d {get;set;} 

	public RepliconTimeEntriesResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'd') {
						d = arrayOfd(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class d {
		public CreatedOn createdOn {get;set;} 
		public List<CustomFields> customFields {get;set;} 
		public DateRange dateRange {get;set;} 
		public EndDate dueDate {get;set;} 
		public List<CustomFields> extensionFieldValues {get;set;} 
		public Boolean noticeExplicitlyAccepted {get;set;} 
		public Owner owner {get;set;} 
		public String slug {get;set;} 
		public String statusUri {get;set;} 
		public List<TimeAllocations> timeAllocations {get;set;} 
		public List<CustomFields> timePunches {get;set;} 
		public TimesheetNotice timesheetNotice {get;set;} 
		public String uri {get;set;} 

		public d(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'createdOn') {
							createdOn = new CreatedOn(parser);
						} else if (text == 'customFields') {
							customFields = arrayOfCustomFields(parser);
						} else if (text == 'dateRange') {
							dateRange = new DateRange(parser);
						} else if (text == 'dueDate') {
							dueDate = new EndDate(parser);
						} else if (text == 'extensionFieldValues') {
							extensionFieldValues = arrayOfCustomFields(parser);
						} else if (text == 'noticeExplicitlyAccepted') {
							noticeExplicitlyAccepted = parser.getBooleanValue();
						} else if (text == 'owner') {
							owner = new Owner(parser);
						} else if (text == 'slug') {
							slug = parser.getText();
						} else if (text == 'statusUri') {
							statusUri = parser.getText();
						} else if (text == 'timeAllocations') {
							timeAllocations = arrayOfTimeAllocations(parser);
						} else if (text == 'timePunches') {
							timePunches = arrayOfCustomFields(parser);
						} else if (text == 'timesheetNotice') {
							timesheetNotice = new TimesheetNotice(parser);
						} else if (text == 'uri') {
							uri = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'd consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CustomFieldValues {
		public CustomField customField {get;set;} 
		public CustomFieldType customFieldType {get;set;} 
		public String text {get;set;} 

		public CustomFieldValues(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'customField') {
							customField = new CustomField(parser);
						} else if (text == 'customFieldType') {
							customFieldType = new CustomFieldType(parser);
						} else if (text == 'text') {
							text = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CustomFieldValues consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Activity {
		public String displayText {get;set;} 
		public String name {get;set;} 
        public String slug {get;set;}
		public String uri {get;set;} 

		public Activity(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'displayText') {
							displayText = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
                        } else if(text == 'slug') {
                          	slug = parser.getText();  
                        } else if (text == 'uri') {
							uri = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Activity consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Duration {
		public Integer hours {get;set;} 
		public Integer microseconds {get;set;} 
		public Integer milliseconds {get;set;} 
		public Integer minutes {get;set;} 
		public Integer seconds {get;set;} 

		public Duration(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'hours') {
							hours = parser.getIntegerValue();
						} else if (text == 'microseconds') {
							microseconds = parser.getIntegerValue();
						} else if (text == 'milliseconds') {
							milliseconds = parser.getIntegerValue();
						} else if (text == 'minutes') {
							minutes = parser.getIntegerValue();
						} else if (text == 'seconds') {
							seconds = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Duration consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CustomFieldType {
		public String displayText {get;set;} 
		public String uri {get;set;} 

		public CustomFieldType(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'displayText') {
							displayText = parser.getText();
						} else if (text == 'uri') {
							uri = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CustomFieldType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ValueInUtc {
		public Integer day {get;set;} 
		public Integer hour {get;set;} 
		public Integer millisecond {get;set;} 
		public Integer minute {get;set;} 
		public Integer month {get;set;} 
		public Integer second {get;set;} 
		public Integer year {get;set;} 

		public ValueInUtc(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'day') {
							day = parser.getIntegerValue();
						} else if (text == 'hour') {
							hour = parser.getIntegerValue();
						} else if (text == 'millisecond') {
							millisecond = parser.getIntegerValue();
						} else if (text == 'minute') {
							minute = parser.getIntegerValue();
						} else if (text == 'month') {
							month = parser.getIntegerValue();
						} else if (text == 'second') {
							second = parser.getIntegerValue();
						} else if (text == 'year') {
							year = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'ValueInUtc consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class EndDate {
		public Integer day {get;set;} 
		public Integer month {get;set;} 
		public Integer year {get;set;} 

		public EndDate(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'day') {
							day = parser.getIntegerValue();
						} else if (text == 'month') {
							month = parser.getIntegerValue();
						} else if (text == 'year') {
							year = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'EndDate consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Project {
		public String displayText {get;set;} 
		public String name {get;set;} 
		public String slug {get;set;} 
		public String projectUri {get;set;} 
		public String code {get;set;}

		public Project(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'displayText') {
							displayText = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'slug') {
							slug = parser.getText();
						} else if (text == 'uri') {
							projectUri = parser.getText();
						} else if (text == 'code') {
							code = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Project consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class TimeZone {
		public String displayText {get;set;} 
		public String ianaName {get;set;} 
		public String offsetDisplayText {get;set;} 
		public String uri {get;set;} 

		public TimeZone(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'displayText') {
							displayText = parser.getText();
						} else if (text == 'ianaName') {
							ianaName = parser.getText();
						} else if (text == 'offsetDisplayText') {
							offsetDisplayText = parser.getText();
						} else if (text == 'uri') {
							uri = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'TimeZone consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CustomFields {
		public String displayText {get;set;} 
		public String groupUri {get;set;} 
		public String name {get;set;} 
		public String uri {get;set;} 
		public EndDate submissionDate {get;set;} 
		public Date submissionDateFormatted {get;set;}
		public CustomFieldType fieldType {get;set;}

		public CustomFields(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							if (text == 'displayText') {
								displayText = parser.getText();
							} else if (text == 'groupUri') {
								groupUri = parser.getText();
							} else if (text == 'name') {
								name = parser.getText();
							} else if (text == 'uri') {
								uri = parser.getText();
							} else if (text == 'date') {
								submissionDate = new EndDate(parser);
								submissionDateFormatted = Date.newInstance(submissionDate.year, submissionDate.month, submissionDate.day);
							} else if(text == 'customFieldType'){
								fieldType = new CustomFieldType(parser);
							}else {
								System.debug(LoggingLevel.WARN, 'CustomFields consuming unrecognized property: '+text);
								consumeObject(parser);
							}
						}
					}
				}
			}
		}
	}
	
	public class DateRange {
		public EndDate endDate {get;set;} 
		public EndDate startDate {get;set;} 

		public DateRange(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'endDate') {
							endDate = new EndDate(parser);
						} else if (text == 'startDate') {
							startDate = new EndDate(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'DateRange consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class TimesheetNotice {
		public String description {get;set;} 
		public List<CustomFields> timesheetNoticeOptionUris {get;set;} 
		public String title {get;set;} 

		public TimesheetNotice(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'description') {
							description = parser.getText();
						} else if (text == 'timesheetNoticeOptionUris') {
							timesheetNoticeOptionUris = arrayOfCustomFields(parser);
						} else if (text == 'title') {
							title = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'TimesheetNotice consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CustomField {
		public String displayText {get;set;} 
		public String groupUri {get;set;} 
		public String name {get;set;} 
		public String uri {get;set;} 
		public EndDate submissionDate {get;set;} 
		public Date submisstionDateFormatted {get;set;}

		public CustomField(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					System.debug('Custom Field class' + text);
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'displayText') {
							displayText = parser.getText();
						} else if (text == 'groupUri') {
							groupUri = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'uri') {
							uri = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CustomField consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CreatedOn {
		public Integer day {get;set;} 
		public String displayText {get;set;} 
		public Integer hour {get;set;} 
		public Integer minute {get;set;} 
		public Integer month {get;set;} 
		public Integer second {get;set;} 
		public TimeZone timeZone {get;set;} 
		public ValueInUtc valueInUtc {get;set;} 
		public Integer year {get;set;} 

		public CreatedOn(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'day') {
							day = parser.getIntegerValue();
						} else if (text == 'displayText') {
							displayText = parser.getText();
						} else if (text == 'hour') {
							hour = parser.getIntegerValue();
						} else if (text == 'minute') {
							minute = parser.getIntegerValue();
						} else if (text == 'month') {
							month = parser.getIntegerValue();
						} else if (text == 'second') {
							second = parser.getIntegerValue();
						} else if (text == 'timeZone') {
							timeZone = new TimeZone(parser);
						} else if (text == 'valueInUtc') {
							valueInUtc = new ValueInUtc(parser);
						} else if (text == 'year') {
							year = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'CreatedOn consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static RepliconTimeEntriesResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new RepliconTimeEntriesResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
    private static List<CustomFieldValues> arrayOfCustomFieldValues(System.JSONParser p) {
        List<CustomFieldValues> res = new List<CustomFieldValues>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new CustomFieldValues(p));
        }
        return res;
    }


    private static List<TimeAllocations> arrayOfTimeAllocations(System.JSONParser p) {
        List<TimeAllocations> res = new List<TimeAllocations>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new TimeAllocations(p));
        }
        return res;
    }


    private static List<d> arrayOfd(System.JSONParser p) {
        List<d> res = new List<d>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new d(p));
        }
        return res;
    }



    private static List<CustomFields> arrayOfCustomFields(System.JSONParser p) {
        List<CustomFields> res = new List<CustomFields>();
        if (p.getCurrentToken() == null){
			p.nextToken();
		}
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new CustomFields(p));
        }
        return res;
    }
}